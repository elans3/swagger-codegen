{{#hasParams}}	
Map<String, String> paramMap =  new HashMap<>();
	{{#allParams}}
		{{#isQueryParam}}
		if({{paramName}} != null && {{paramName}}.getClass().toString().contains("List")) {
			paramMap.put("{{baseName}}", addQueryParamValue({{paramName}}));					
		} else {
			paramMap.put("{{baseName}}", String.valueOf({{paramName}}));
		}
		{{/isQueryParam}}
		{{#isPathParam}}
		paramMap.put("{{baseName}}", String.valueOf({{paramName}}));{{/isPathParam}}
	{{/allParams}}
		try {
			mockUtil.setResource("{{baseName}}");
			mockUtil.setOperationId("{{operationId}}");
			mockUtil.setParams(paramMap);
			{{#bodyParams}}
			mockUtil.setInputObjectType({{#allParams}}{{>bodyParamsInput}}{{/allParams}}.getClass());
			mockUtil.setInputObject({{#allParams}}{{>bodyParamsInput}}{{/allParams}});
			{{/bodyParams}}
			return mockUtil.returnResponse();
		} catch (Exception e) {
			log.error("Unable to load the mock Response for " + "{{operationId}}", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for {{operationId}}\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}
{{/hasParams}}
{{^hasParams}}
	return new ResponseEntity("{\"code\": \"CASE_NOT_HANDLED\", \"message\":\"Mock NOT SUPPORTED AT this time \"}", HttpStatus.INTERNAL_SERVER_ERROR);
{{/hasParams}}
